diff --git a/node_modules/react-native-calendar-events/ios/RNCalendarEvents.m b/node_modules/react-native-calendar-events/ios/RNCalendarEvents.m
index a85c013..ff20fb6 100644
--- a/node_modules/react-native-calendar-events/ios/RNCalendarEvents.m
+++ b/node_modules/react-native-calendar-events/ios/RNCalendarEvents.m
@@ -95,7 +95,7 @@ - (BOOL)isCalendarAccessGranted
 {
     EKAuthorizationStatus status = [EKEventStore authorizationStatusForEntityType:EKEntityTypeEvent];
 
-    return status == EKAuthorizationStatusAuthorized;
+    return status == EKAuthorizationStatusFullAccess;
 }
 
 #pragma mark -
@@ -742,15 +742,21 @@ - (NSDictionary *)serializeCalendarEvent:(EKEvent *)event
     EKAuthorizationStatus authStatus = [EKEventStore authorizationStatusForEntityType:EKEntityTypeEvent];
 
     switch (authStatus) {
+        case EKAuthorizationStatusFullAccess:
+            status = @"authorized";
+            break;
+        case EKAuthorizationStatusWriteOnly:
+            status = @"restricted";
+            break;
         case EKAuthorizationStatusDenied:
             status = @"denied";
             break;
+        case EKAuthorizationStatusNotDetermined:
+            status = @"undetermined";
+            break;
         case EKAuthorizationStatusRestricted:
             status = @"restricted";
             break;
-        case EKAuthorizationStatusAuthorized:
-            status = @"authorized";
-            break;
         default:
             status = @"undetermined";
             break;
@@ -761,14 +767,14 @@ - (NSDictionary *)serializeCalendarEvent:(EKEvent *)event
 
 RCT_EXPORT_METHOD(requestPermissions:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
 {
-    [self.eventStore requestAccessToEntityType:EKEntityTypeEvent completion:^(BOOL granted, NSError *error) {
-        NSString *status = granted ? @"authorized" : @"denied";
-        if (!error) {
-            resolve(status);
-        } else {
-            reject(@"error", @"authorization request error", error);
-        }
-    }];
+   [self.eventStore requestAccessToEntityType:EKEntityTypeEvent completion:^(BOOL granted, NSError *error) {
+      NSString *status = granted ? @"authorized" : @"denied";
+      if (!error) {
+          resolve(status);
+      } else {
+          reject(@"error", @"authorization request error", error);
+      }
+  }];
 }
 
 RCT_EXPORT_METHOD(findCalendars:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
